// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package node

import (
	"fmt"
	"io"
	"sort"

	crypto "github.com/filecoin-project/go-state-types/crypto"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufRRecord = []byte{132}

func (t *RRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRRecord); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.PeerAddr ([]uint8) (slice)
	if len(t.PeerAddr) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.PeerAddr was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.PeerAddr))); err != nil {
		return err
	}

	if _, err := w.Write(t.PeerAddr[:]); err != nil {
		return err
	}

	// t.PayAddr (address.Address) (struct)
	if err := t.PayAddr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Size (int64) (int64)
	if t.Size >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Size-1)); err != nil {
			return err
		}
	}

	// t.Signature (crypto.Signature) (struct)
	if err := t.Signature.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RRecord) UnmarshalCBOR(r io.Reader) error {
	*t = RRecord{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.PeerAddr ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.PeerAddr: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.PeerAddr = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.PeerAddr[:]); err != nil {
		return err
	}
	// t.PayAddr (address.Address) (struct)

	{

		if err := t.PayAddr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.PayAddr: %w", err)
		}

	}
	// t.Size (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Size = int64(extraI)
	}
	// t.Signature (crypto.Signature) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}
			t.Signature = new(crypto.Signature)
			if err := t.Signature.UnmarshalCBOR(br); err != nil {
				return xerrors.Errorf("unmarshaling t.Signature pointer: %w", err)
			}
		}

	}
	return nil
}
