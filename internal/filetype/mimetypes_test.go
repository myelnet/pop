package filetype

import (
	"bytes"
	"github.com/stretchr/testify/require"
	"os"
	"path/filepath"
	"testing"
)

func TestDetect(t *testing.T) {
	// guess file type using file's extension
	type_ := Detect("/foo/image.png", bytes.NewReader([]byte("")))
	require.Equal(t, Image, type_)

	type_ = Detect("/foo/image.mp3", bytes.NewReader([]byte("")))
	require.Equal(t, Audio, type_)

	type_ = Detect("/foo/image.avi", bytes.NewReader([]byte("")))
	require.Equal(t, Video, type_)

	type_ = Detect("/foo/image.tar.gz", bytes.NewReader([]byte("")))
	require.Equal(t, Archive, type_)

	type_ = Detect("/foo/image.txt", bytes.NewReader([]byte("")))
	require.Equal(t, Text, type_)

	type_ = Detect("/foo/image.qsdfqfq", bytes.NewReader([]byte("")))
	require.Equal(t, Unknown, type_)

	// guess file type by reading file's content, given a path with no file extension
	dir := t.TempDir()
	p := filepath.Join(dir, "file")
	err := os.WriteFile(p, ZIP_ARCHIVE, 0666)
	require.NoError(t, err)
	type_ = Detect(p, bytes.NewReader([]byte("")))
	require.Equal(t, Archive, type_)

	// guess file type using a buffer only
	type_ = Detect("", bytes.NewReader(GIF_IMAGE))
	require.Equal(t, Image, type_)

	ii := bytes.NewReader(UNKNOWN)
	type_ = Detect("", ii)
	require.Equal(t, Unknown, type_)

	// make sure we don't consume the original buffer
	r := bytes.NewReader(GIF_IMAGE)
	type_ = Detect("", r)
	require.Equal(t, r.Len(), len(GIF_IMAGE))
	require.Equal(t, Image, type_)
}

var UNKNOWN = []byte{
	0x47, 0x00, 0x46, 0x00, 0x39, 0x61, 0x00, 0x2c, 0x01, 0x00, 0x80, 0x00, 0x44, 0xff, 0xff, 0x44,
	0x2c, 0x00, 0x00, 0x2c, 0xf9, 0x04, 0x00, 0x00, 0x00, 0x44, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x44, 0x01, 0x00, 0x3b,
}

var GIF_IMAGE = []byte{
	0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x44, 0x01, 0x00, 0x3b,
}

var ZIP_ARCHIVE = []byte{
	0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x07, 0x86, 0xed, 0x52, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x20, 0x00, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x55, 0x54, 0x0d, 0x00, 0x07, 0xae, 0xa7, 0xed, 0x60,
	0x0e, 0xa8, 0xed, 0x60, 0x0c, 0xa8, 0xed, 0x60, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xf5, 0x01,
	0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x73, 0xf7, 0x74, 0xb3, 0xb0, 0x4c, 0x64, 0x64, 0x60,
	0x64, 0x68, 0x60, 0x60, 0xf8, 0xff, 0xff, 0x3f, 0x03, 0x03, 0x83, 0xe2, 0x4f, 0x16, 0x06, 0x10,
	0xd0, 0x01, 0x11, 0x20, 0x19, 0x06, 0x26, 0x26, 0x17, 0x46, 0x06, 0x6b, 0x00, 0x50, 0x4b, 0x07,
	0x08, 0x2f, 0x69, 0x16, 0x05, 0x26, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x03,
	0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x07, 0x86, 0xed, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x14, 0x00, 0x20, 0x00, 0x5f, 0x5f, 0x4d, 0x41, 0x43,
	0x4f, 0x53, 0x58, 0x2f, 0x2e, 0x5f, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x55,
	0x54, 0x0d, 0x00, 0x07, 0xae, 0xa7, 0xed, 0x60, 0x0e, 0xa8, 0xed, 0x60, 0xeb, 0xa9, 0xed, 0x60,
	0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xf5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x63,
	0x60, 0x15, 0x63, 0x67, 0x60, 0x62, 0x60, 0xf0, 0x4d, 0x4c, 0x56, 0xf0, 0x0f, 0x56, 0x88, 0x50,
	0x80, 0x02, 0x90, 0x18, 0x03, 0x27, 0x10, 0x1b, 0x31, 0x30, 0x30, 0xb2, 0x02, 0x69, 0x20, 0x9f,
	0xd1, 0x9c, 0x81, 0x28, 0xe0, 0x18, 0x12, 0x12, 0x04, 0x61, 0x81, 0x75, 0x6c, 0x01, 0xe2, 0x66,
	0x34, 0x25, 0x4c, 0x50, 0x71, 0x0f, 0x06, 0x06, 0xfe, 0xe4, 0xfc, 0x5c, 0xbd, 0xc4, 0x82, 0x82,
	0x9c, 0x54, 0xbd, 0xdc, 0xc4, 0xe4, 0x1c, 0x88, 0xfc, 0x1f, 0x20, 0xb6, 0x66, 0x60, 0x10, 0x45,
	0xc8, 0x15, 0x96, 0x26, 0x16, 0x25, 0xe6, 0x95, 0x64, 0xe6, 0xa5, 0x32, 0x30, 0x33, 0x9c, 0xaf,
	0x33, 0xb7, 0x38, 0x3d, 0xc7, 0x43, 0x6c, 0xd3, 0xbc, 0x92, 0x8f, 0xfe, 0x7a, 0x89, 0x13, 0x89,
	0x73, 0x17, 0x3a, 0x28, 0xd4, 0x37, 0x30, 0xb0, 0x30, 0xb4, 0x36, 0x33, 0x48, 0x4d, 0x49, 0x34,
	0x4f, 0x32, 0xb5, 0x76, 0x2a, 0x4a, 0x2c, 0x4b, 0xb5, 0x76, 0x31, 0xb1, 0x34, 0x33, 0x37, 0x36,
	0x35, 0xd2, 0x75, 0x32, 0x36, 0xb1, 0xd4, 0x35, 0x31, 0x35, 0x33, 0xd5, 0x75, 0x74, 0x72, 0x74,
	0xd1, 0x75, 0x72, 0x32, 0x34, 0x31, 0x77, 0xb4, 0xb4, 0x34, 0x35, 0x76, 0x33, 0x60, 0x00, 0x00,
	0x50, 0x4b, 0x07, 0x08, 0xb3, 0x22, 0xed, 0x15, 0xb1, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00,
	0x50, 0x4b, 0x01, 0x02, 0x14, 0x03, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x07, 0x86, 0xed, 0x52,
	0x2f, 0x69, 0x16, 0x05, 0x26, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x55, 0x54, 0x0d, 0x00, 0x07, 0xae, 0xa7, 0xed, 0x60,
	0x0e, 0xa8, 0xed, 0x60, 0x0c, 0xa8, 0xed, 0x60, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xf5, 0x01,
	0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x01, 0x02, 0x14, 0x03, 0x14, 0x00, 0x08,
	0x00, 0x08, 0x00, 0x07, 0x86, 0xed, 0x52, 0xb3, 0x22, 0xed, 0x15, 0xb1, 0x00, 0x00, 0x00, 0x37,
	0x01, 0x00, 0x00, 0x14, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4,
	0x81, 0x7d, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x4d, 0x41, 0x43, 0x4f, 0x53, 0x58, 0x2f, 0x2e, 0x5f,
	0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x55, 0x54, 0x0d, 0x00, 0x07, 0xae, 0xa7,
	0xed, 0x60, 0x0e, 0xa8, 0xed, 0x60, 0xeb, 0xa9, 0xed, 0x60, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04,
	0xf5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x02, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00,
}
